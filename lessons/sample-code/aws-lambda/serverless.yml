service: ios-auth-backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  timeout: 30
  memorySize: 512
  
  environment:
    STAGE: ${self:provider.stage}
    USERS_TABLE: ${self:service}-users-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET}
    JWT_EXPIRES_IN: ${env:JWT_EXPIRES_IN, '24h'}
    FIREBASE_PROJECT_ID: ${env:FIREBASE_PROJECT_ID}
    FIREBASE_CLIENT_EMAIL: ${env:FIREBASE_CLIENT_EMAIL}
    FIREBASE_PRIVATE_KEY: ${env:FIREBASE_PRIVATE_KEY}
    LOG_LEVEL: ${env:LOG_LEVEL, 'info'}
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

functions:
  registerUser:
    handler: userFunctions.registerUser
    events:
      - http:
          path: auth/register
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
    reservedConcurrency: 10
    
  loginUser:
    handler: userFunctions.loginUser
    events:
      - http:
          path: auth/login
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
    reservedConcurrency: 20
    
  getUserProfile:
    handler: userFunctions.getUserProfile
    events:
      - http:
          path: users/{userId}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
    reservedConcurrency: 5
    
  updateUserProfile:
    handler: userFunctions.updateUserProfile
    events:
      - http:
          path: users/{userId}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
    reservedConcurrency: 5
    
  deleteUserAccount:
    handler: userFunctions.deleteUserAccount
    events:
      - http:
          path: users/{userId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
    reservedConcurrency: 2

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        Tags:
          - Key: Service
            Value: ${self:service}
          - Key: Stage
            Value: ${self:provider.stage}
    
    # API Gateway for enhanced security
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-${self:provider.stage}
        Description: iOS Authentication API
        EndpointConfiguration:
          Types:
            - REGIONAL
        Policy:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource: '*'
              Condition:
                IpAddress:
                  aws:SourceIp:
                    - '0.0.0.0/0'  # Configure IP restrictions as needed
    
    # CloudWatch Log Group for API Gateway
    ApiGatewayLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/apigateway/${self:service}-${self:provider.stage}
        RetentionInDays: 30

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3001
    host: 0.0.0.0
    cors: true
    
outputs:
  ApiGatewayRestApiId:
    Value:
      Ref: ApiGatewayRestApi
  ApiGatewayRestApiRootResourceId:
    Value:
      Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
  UsersTableName:
    Value: ${self:provider.environment.USERS_TABLE}
  UsersTableArn:
    Value:
      Fn::GetAtt:
        - UsersTable
        - Arn
